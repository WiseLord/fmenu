
build/stm32_fmenu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000380  08000380  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000004  0800038c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  0800038c  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_frame  0000016c  00000000  00000000  00020030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00001da7  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000007c0  00000000  00000000  00021f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a16  00000000  00000000  00022703  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000000a8  00000000  00000000  00023119  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002e0  00000000  00000000  000231c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00000e04  00000000  00000000  000234a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00000a59  00000000  00000000  000242a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00000079  00000000  00000000  00024cfe  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000368 	.word	0x08000368

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000368 	.word	0x08000368

0800014c <__libc_init_array>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	2600      	movs	r6, #0
 8000150:	4d0c      	ldr	r5, [pc, #48]	; (8000184 <__libc_init_array+0x38>)
 8000152:	4c0d      	ldr	r4, [pc, #52]	; (8000188 <__libc_init_array+0x3c>)
 8000154:	1b64      	subs	r4, r4, r5
 8000156:	10a4      	asrs	r4, r4, #2
 8000158:	42a6      	cmp	r6, r4
 800015a:	d109      	bne.n	8000170 <__libc_init_array+0x24>
 800015c:	f000 f904 	bl	8000368 <_init>
 8000160:	2600      	movs	r6, #0
 8000162:	4d0a      	ldr	r5, [pc, #40]	; (800018c <__libc_init_array+0x40>)
 8000164:	4c0a      	ldr	r4, [pc, #40]	; (8000190 <__libc_init_array+0x44>)
 8000166:	1b64      	subs	r4, r4, r5
 8000168:	10a4      	asrs	r4, r4, #2
 800016a:	42a6      	cmp	r6, r4
 800016c:	d105      	bne.n	800017a <__libc_init_array+0x2e>
 800016e:	bd70      	pop	{r4, r5, r6, pc}
 8000170:	f855 3b04 	ldr.w	r3, [r5], #4
 8000174:	4798      	blx	r3
 8000176:	3601      	adds	r6, #1
 8000178:	e7ee      	b.n	8000158 <__libc_init_array+0xc>
 800017a:	f855 3b04 	ldr.w	r3, [r5], #4
 800017e:	4798      	blx	r3
 8000180:	3601      	adds	r6, #1
 8000182:	e7f2      	b.n	800016a <__libc_init_array+0x1e>
 8000184:	08000380 	.word	0x08000380
 8000188:	08000380 	.word	0x08000380
 800018c:	08000380 	.word	0x08000380
 8000190:	08000384 	.word	0x08000384

08000194 <Reset_Handler>:
 8000194:	2100      	movs	r1, #0
 8000196:	e003      	b.n	80001a0 <LoopCopyDataInit>

08000198 <CopyDataInit>:
 8000198:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <LoopFillZerobss+0x14>)
 800019a:	585b      	ldr	r3, [r3, r1]
 800019c:	5043      	str	r3, [r0, r1]
 800019e:	3104      	adds	r1, #4

080001a0 <LoopCopyDataInit>:
 80001a0:	480a      	ldr	r0, [pc, #40]	; (80001cc <LoopFillZerobss+0x18>)
 80001a2:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <LoopFillZerobss+0x1c>)
 80001a4:	1842      	adds	r2, r0, r1
 80001a6:	429a      	cmp	r2, r3
 80001a8:	d3f6      	bcc.n	8000198 <CopyDataInit>
 80001aa:	4a0a      	ldr	r2, [pc, #40]	; (80001d4 <LoopFillZerobss+0x20>)
 80001ac:	e002      	b.n	80001b4 <LoopFillZerobss>

080001ae <FillZerobss>:
 80001ae:	2300      	movs	r3, #0
 80001b0:	f842 3b04 	str.w	r3, [r2], #4

080001b4 <LoopFillZerobss>:
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <LoopFillZerobss+0x24>)
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d3f9      	bcc.n	80001ae <FillZerobss>
 80001ba:	f000 f8af 	bl	800031c <SystemInit>
 80001be:	f7ff ffc5 	bl	800014c <__libc_init_array>
 80001c2:	f000 f86f 	bl	80002a4 <main>
 80001c6:	4770      	bx	lr
 80001c8:	08000388 	.word	0x08000388
 80001cc:	20000000 	.word	0x20000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000004 	.word	0x20000004
 80001d8:	20000020 	.word	0x20000020

080001dc <ADC1_2_IRQHandler>:
 80001dc:	e7fe      	b.n	80001dc <ADC1_2_IRQHandler>
	...

080001e0 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <LL_APB2_GRP1_EnableClock+0x18>)
{
 80001e2:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 80001e4:	699a      	ldr	r2, [r3, #24]
 80001e6:	4302      	orrs	r2, r0
 80001e8:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4018      	ands	r0, r3
 80001ee:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80001f0:	9b01      	ldr	r3, [sp, #4]
}
 80001f2:	b002      	add	sp, #8
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40021000 	.word	0x40021000

080001fc <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80001fc:	4a24      	ldr	r2, [pc, #144]	; (8000290 <SystemClock_Config+0x94>)
    NVIC_SetPriority(DebugMonitor_IRQn, 0);
    NVIC_SetPriority(PendSV_IRQn, 0);
}

void SystemClock_Config(void)
{
 80001fe:	b508      	push	{r3, lr}
 8000200:	6813      	ldr	r3, [r2, #0]
 8000202:	f023 0307 	bic.w	r3, r3, #7
 8000206:	f043 0302 	orr.w	r3, r3, #2
 800020a:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800020c:	4b21      	ldr	r3, [pc, #132]	; (8000294 <SystemClock_Config+0x98>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000214:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000216:	681a      	ldr	r2, [r3, #0]
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);

    // Configure HSE
    LL_RCC_HSE_Enable();
    // Wait till HSE is ready
    while (LL_RCC_HSE_IsReady() != 1);
 8000218:	0391      	lsls	r1, r2, #14
 800021a:	d5fc      	bpl.n	8000216 <SystemClock_Config+0x1a>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800021c:	685a      	ldr	r2, [r3, #4]
 800021e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000222:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000226:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800022e:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000230:	681a      	ldr	r2, [r3, #0]

    // Configure PLL
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
    LL_RCC_PLL_Enable();
    // Wait till PLL is ready
    while (LL_RCC_PLL_IsReady() != 1);
 8000232:	0192      	lsls	r2, r2, #6
 8000234:	d5fc      	bpl.n	8000230 <SystemClock_Config+0x34>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000236:	685a      	ldr	r2, [r3, #4]
 8000238:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800023c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	f022 0203 	bic.w	r2, r2, #3
 8000244:	f042 0202 	orr.w	r2, r2, #2
 8000248:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800024a:	685a      	ldr	r2, [r3, #4]
 800024c:	f002 020c 	and.w	r2, r2, #12

    // Configure system clock
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    // Wait till System clock is ready
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000250:	2a08      	cmp	r2, #8
 8000252:	d1fa      	bne.n	800024a <SystemClock_Config+0x4e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000254:	685a      	ldr	r2, [r3, #4]
#ifdef STM32F3
    LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_8);
#endif

    // Configure SysTick
    LL_Init1msTick(72000000);
 8000256:	4810      	ldr	r0, [pc, #64]	; (8000298 <SystemClock_Config+0x9c>)
 8000258:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800025c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000260:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000262:	685a      	ldr	r2, [r3, #4]
 8000264:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000268:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 800026a:	685a      	ldr	r2, [r3, #4]
 800026c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	f000 f83f 	bl	80002f4 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <SystemClock_Config+0xa0>)
    LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
    LL_SetSystemCoreClock(72000000);
 8000278:	4807      	ldr	r0, [pc, #28]	; (8000298 <SystemClock_Config+0x9c>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	6013      	str	r3, [r2, #0]
 8000282:	f000 f845 	bl	8000310 <LL_SetSystemCoreClock>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000286:	2200      	movs	r2, #0
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <SystemClock_Config+0xa4>)
 800028a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    // SysTick_IRQn interrupt configuration
    NVIC_SetPriority(SysTick_IRQn, 0);
}
 800028e:	bd08      	pop	{r3, pc}
 8000290:	40022000 	.word	0x40022000
 8000294:	40021000 	.word	0x40021000
 8000298:	044aa200 	.word	0x044aa200
 800029c:	e000e010 	.word	0xe000e010
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <main>:
    LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
#endif
}

int main(void)
{
 80002a4:	b507      	push	{r0, r1, r2, lr}
 80002a6:	2200      	movs	r2, #0
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <main+0x48>)
 80002aa:	761a      	strb	r2, [r3, #24]
 80002ac:	765a      	strb	r2, [r3, #25]
 80002ae:	769a      	strb	r2, [r3, #26]
 80002b0:	77da      	strb	r2, [r3, #31]
 80002b2:	f883 2020 	strb.w	r2, [r3, #32]
 80002b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SystemClock_Config();
 80002ba:	f7ff ff9f 	bl	80001fc <SystemClock_Config>
  SET_BIT(RCC->APB1ENR, Periphs);
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <main+0x4c>)
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80002c0:	2004      	movs	r0, #4
 80002c2:	69da      	ldr	r2, [r3, #28]
 80002c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002c8:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002d0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80002d2:	9b01      	ldr	r3, [sp, #4]
 80002d4:	f7ff ff84 	bl	80001e0 <LL_APB2_GRP1_EnableClock>
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80002d8:	2008      	movs	r0, #8
 80002da:	f7ff ff81 	bl	80001e0 <LL_APB2_GRP1_EnableClock>
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80002de:	2010      	movs	r0, #16
 80002e0:	f7ff ff7e 	bl	80001e0 <LL_APB2_GRP1_EnableClock>
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f7ff ff7b 	bl	80001e0 <LL_APB2_GRP1_EnableClock>
    sysInit();
    
    while(1) {
 80002ea:	e7fe      	b.n	80002ea <main+0x46>
 80002ec:	e000ed00 	.word	0xe000ed00
 80002f0:	40021000 	.word	0x40021000

080002f4 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80002f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002f8:	fbb0 f0f3 	udiv	r0, r0, r3
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80002fc:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80002fe:	4b03      	ldr	r3, [pc, #12]	; (800030c <LL_Init1msTick+0x18>)
 8000300:	3801      	subs	r0, #1
 8000302:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000306:	2205      	movs	r2, #5
 8000308:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 800030a:	4770      	bx	lr
 800030c:	e000e010 	.word	0xe000e010

08000310 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <LL_SetSystemCoreClock+0x8>)
 8000312:	6018      	str	r0, [r3, #0]
}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	20000000 	.word	0x20000000

0800031c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <SystemInit+0x40>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	f042 0201 	orr.w	r2, r2, #1
 8000324:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000326:	6859      	ldr	r1, [r3, #4]
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <SystemInit+0x44>)
 800032a:	400a      	ands	r2, r1
 800032c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000334:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000338:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000340:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000348:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800034a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800034e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000350:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <SystemInit+0x48>)
 8000356:	609a      	str	r2, [r3, #8]
#endif 
}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	f8ff0000 	.word	0xf8ff0000
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <_init>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

08000374 <_fini>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr
